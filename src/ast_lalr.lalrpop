use std::str::FromStr;
use crate::ast::*;
use crate::utils::*;

grammar;
match {
    r"\s*" => { }, // The default whitespace skipping is disabled if an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _
}


pub Program: Vec<Fun<Expr>> = {
    <f:Fun*> => f,
}

Fun : Fun<Expr> = {
    <t:Type> <i:Ident> "(" <args:Comma<Arg>> ")" <b:Block> => (t, i, args, b),
}

Arg : Arg = {
    <t:Type> <i:Ident> => (t, i),
}

Stm: Box<Stm<Expr>> = {
    OpenStm,
    ClosedStm,
}

OpenStm: Box<Stm<Expr>> = {
    "if" "(" <e:Expr> ")" <s:Stm> => Box::new(Stm::SIf(e, s, None)),
    "if" "(" <e:Expr> ")" <s1:ClosedStm> "else" <s2:OpenStm> => Box::new(Stm::SIf(e, s1,Some(s2))),
    "while" "(" <e:Expr> ")" <s:OpenStm> => Box::new(Stm::SWhile(e, s)),
}

ClosedStm: Box<Stm<Expr>> = {
    SimpleStm,
    "if" "(" <e:Expr> ")" <s1:ClosedStm> "else" <s2:ClosedStm> => Box::new(Stm::SIf(e, s1,Some(s2))),
    "while" "(" <e:Expr> ")" <s:ClosedStm> => Box::new(Stm::SWhile(e, s)),
}

SimpleStm: Box<Stm<Expr>> = {
    <e:Expr> ";" => Box::new(Stm::SExp(e)),
    <b:Block> => Box::new(Stm::SBlock(b)),
    <t:Type> <i:Comma<Init>> ";" => Box::new(Stm::SInit(t,i)),
    <i:Ident> "=" <e:Expr> ";" => Box::new(Stm::SAss(i, e)),
    ";" => Box::new(Stm::SEmpty),
    <i:Ident> "++" ";" => Box::new(Stm::SIncDec(i, true)),
    <i:Ident> "--" ";" => Box::new(Stm::SIncDec(i, false)),
    SRet,
}

Block: Block<Expr> = {
    "{" <v:Stm*> "}" => v,
}


Expr6: Box<Expr> = {
    <i:Ident> "(" <args:Comma<Expr>> ")" => Box::new(Expr::EApp(i, args)),
    "(" <e:Expr> ")" => e,
    Double => Box::new(Expr::ELitDouble(<>)),
    Int => Box::new(Expr::ELitInt(<>)),
    String => Box::new(Expr::ELitString(<>)),
    Ident => Box::new(Expr::EIdent(<>)),
    "true" => Box::new(Expr::ELitBool(true)),
    "false" => Box::new(Expr::ELitBool(false)),
}

Expr5: Box<Expr> = {
    Expr6,
    Unop Expr6 => Box::new(Expr::EUnop(<>)),
}

Expr4: Box<Expr> = {
    Expr5,
    Expr4 Mulop Expr5 => Box::new(Expr::EBinop(<>)),
}

Expr3: Box<Expr> = {
    Expr4,
    Expr3 Addop Expr4 => Box::new(Expr::EBinop(<>)),
}

Expr2: Box<Expr> = {
    Expr3,
    Expr2 Relop Expr3 => Box::new(Expr::EBinop(<>)),
}

Expr1: Box<Expr> = {
    Expr2,
    <l:Expr2> "&&" <r:Expr1> => Box::new(Expr::EBinop(l, Binop::And, r)),
}

Expr: Box<Expr> = {
   Expr1, 
    <l:Expr1> "||" <r:Expr> => Box::new(Expr::EBinop(l, Binop::Or, r)),
}


Exprbak: Box<Expr> = {
    #[precedence(level="0")] // Highest precedence
    Expr6,
    Double => Box::new(Expr::ELitDouble(<>)),
    Int => Box::new(Expr::ELitInt(<>)),
    String => Box::new(Expr::ELitString(<>)),
    Ident => Box::new(Expr::EIdent(<>)),
    Unop Expr => Box::new(Expr::EUnop(<>)),
    "true" => Box::new(Expr::ELitBool(true)),
    "false" => Box::new(Expr::ELitBool(false)),
    "(" <e:Expr> ")" => e,

    #[precedence(level="1")] #[assoc(side="left")]
    Expr Mulop Expr => Box::new(Expr::EBinop(<>)),

    #[precedence(level="2")] #[assoc(side="left")]
    Expr Addop Expr => Box::new(Expr::EBinop(<>)),

    #[precedence(level="3")] #[assoc(side="none")]
    Expr Relop Expr => Box::new(Expr::EBinop(<>)),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> "&&" <r:Expr> => Box::new(Expr::EBinop(l, Binop::And, r)),
    <l:Expr> "||" <r:Expr> => Box::new(Expr::EBinop(l, Binop::Or, r)),
};


Int: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
Double: f64 = r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap();
String: String = <l:r#""(\\\\|\\"|[^"\\])*""#> => apply_string_escapes(&l[1..l.len()-1]);
Ident: String = <r"[a-zA-Z_$][\w$]*"> => <>.into();


Addop: Binop = {
    "+" => Binop::Add,
    "-" => Binop::Sub,
};

Mulop: Binop = {
    "*" => Binop::Mul,
    "/" => Binop::Div,
    "%" => Binop::Mod,
}

Relop: Binop = {
    "<" => Binop::Lt,
    "<=" => Binop::Le,
    ">" => Binop::Gt,
    ">=" => Binop::Ge,
    "==" => Binop::Eq,
    "!=" => Binop::Ne,
}


Unop: Unop = {
    "-" => Unop::Neg,
    "!" => Unop::Not,
}

Type: Type = {
    "int" => Type::TInt,
    "double" => Type::TDouble,
    "boolean" => Type::TBool,
    "string" => Type::TString,
    "void" => Type::TVoid,
}   

Init: Decl<Expr> = {
    <i:Ident> => (i, None),
    <i:Ident> "=" <e:Expr> => (i, Some(e)),
}

SRet: Box<Stm<Expr>> = {
    "return" <e:Expr> ";" => Box::new(Stm::SRet(Some(e))),
    "return" ";" => Box::new(Stm::SRet(None)),
}


Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
